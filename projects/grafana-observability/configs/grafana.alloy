logging {
  level  = "info"
  format = "logfmt"
}

// local.file_match "local_container_files" {
//   path_targets = [{"__path__" = "/var/log/containers/**/*.log"}]
//   sync_period = "5s"
// }

// loki.source.file "containers_logs_scrape" {
//   targets    = local.file_match.local_container_files.targets
//   forward_to = [loki.process.process_container_logs.receiver]
//   tail_from_end = true
// }

// Discover docker containers to collect logs from
discovery.docker "docker_containers" {
  // Note that if you are using Docker Desktop Engine this may need to be changed to
  // something like "unix:///${HOME}/.docker/desktop/docker.sock"
  host = "unix:///var/run/docker.sock"
}

// Extract container name from __meta_docker_container_name label and add as label
discovery.relabel "docker_containers" {
  targets = discovery.docker.docker_containers.targets

  rule {
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container"
  }
}

// Scrape logs from docker containers and send to be processed
loki.source.docker "docker_container_logs" {
  host    = "unix:///var/run/docker.sock"
  targets = discovery.relabel.docker_containers.output
  forward_to = [loki.process.process_container_logs.receiver]
}

loki.process "process_container_logs" {
  stage.json {
    expressions = {
      log = "",
      ts  = "timestamp",
    }
  }
  
  stage.timestamp {
    source = "ts"
    format = "RFC3339"
  }

  stage.json {
    source = "log"

    expressions = {
      is_secret = "",
      level     = "",
      log_line  = "message",
    }
  }

  stage.drop {
    source = "is_secret"
    value  = "true"
  }

  stage.labels {
    values = {
        level = "",
    }
  }

  stage.output {
    source = "log_line"
  }

  forward_to = [loki.write.grafana_loki.receiver]
}

loki.write "grafana_loki" {
  endpoint {
    url = "http://observability-loki:3100/loki/api/v1/push"

    // basic_auth {
    //  username = "admin"
    //  password = "admin"
    // }
  }
}

pyroscope.ebpf "docker_containers_ebpf" {
 targets = discovery.docker.docker_containers.targets
 forward_to = [pyroscope.write.grafana_pyroscope.receiver]
}

pyroscope.write "grafana_pyroscope" {
  endpoint {
    url = "http://observability-pyroscope:4040"
  }

  external_labels = {
    "env"      = "local",
    "instance" = env("HOSTNAME"),
  }
}

// pyroscope.scrape "scrape_dcp_broadcaster_profilings" {
//   targets    = [{"__address__" = "localhost:4040", "service_name" = "example_service"}]
//   forward_to = [pyroscope.write.grafana_pyroscope.receiver]

//   profiling_config {
//     profile.process_cpu {
//       enabled = true
//     }

//     profile.godeltaprof_memory {
//       enabled = true
//     }

//     profile.memory { // disable memory, use godeltaprof_memory instead
//       enabled = false
//     }

//     profile.godeltaprof_mutex {
//       enabled = true
//     }

//     profile.mutex { // disable mutex, use godeltaprof_mutex instead
//       enabled = false
//     }

//     profile.godeltaprof_block {
//       enabled = true
//     }

//     profile.block { // disable block, use godeltaprof_block instead
//       enabled = false
//     }

//     profile.goroutine {
//       enabled = true
//     }
//   }
// }